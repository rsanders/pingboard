/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();

    pingview.hideScrolldown();

    setupPingFM();

    setupUI();
    
    pingdb.initialize();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
    pingview.preExecute();
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    pingview.preExecute();

    // Restart any timers that were stopped on hide
    setTimeout("checkConfig();", 500);
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    var error = document.getElementById("error_pane");
    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    error.style.display= "none";
    back.style.display = "block";


    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    var error = document.getElementById("error_pane");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";
    error.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

function showError(message)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    var error = document.getElementById("error_pane");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    jQuery('#error_text').val(message);

    front.style.display="none";
    back.style.display="none";
    error_pane.style.display="block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function checkConfig()
{
    if (! pingprefs.isConfigured())
    {
        firstTimeConfiguration();
    }
}

function openPingFM(event)
{
    widget.openURL("http://ping.fm/");
}


function openAppKeyPage(event)
{
    widget.openURL("http://ping.fm/key/");
}


function postTextChange()
{
    var count = jQuery('#post_text').val().length;
    jQuery('#character_count').text(String(count));
}

var pingprefs = {
    _makekey: function(key) {
        return widget.identifier + "-" + key;
    },
    
    setPref: function(key, value) {
        widget.setPreferenceForKey(value, this._makekey(key) );
    },
    
    getPref: function(key, defval) {
        var res = widget.preferenceForKey( this._makekey(key) );
        if (res == undefined) {
            return defval;
        } else {
            return res;
        }
    },
    
    isConfigured: function() {
        return this.getPref("configured") == "true";
    },
    
    setConfigured: function(val) {
        this.setPref("configured", val ? "true" : "false");
    },
}

function setAppKey(value)
{
    pingprefs.setPref("pingfm_appkey", value);
}

function getAppKey()
{
    return pingprefs.setPref("pingfm_appkey");
}

function savePrefs()
{
    pingprefs.setPref("pingfm_appkey", pingview.getAppKey());
    pingprefs.setPref("debug", pingview.getDebug());
    pingprefs.setPref("name", pingview.getAccountName());
    
    pingprefs.setPref("configured", "true");
}

function populatePrefs()
{
    pingview.setAppKey(pingprefs.getPref("pingfm_appkey"));
    pingview.setDebug(pingprefs.getPref("debug"));
    pingview.setAccountName(pingprefs.getPref("name"));
}

function configDone(event)
{
    // reset custom trigger list
    handleTriggers(null);
    
    savePrefs();
    setupPingFM();

    setTimeout("setupUI();", 200);

    return showFront(event);
}

function doShowBack(event)
{
    populatePrefs();
    showBack(event);
}

function firstTimeConfiguration()
{
    showBack();
}


function validateUser(event)
{
    // need to save prefs and setup Ping.FM first so we have the latest key
    savePrefs();
    setupPingFM();

    pingfm.validateUser();
}

function setupPingFM()
{
    pingfm.api_key = '62efb891fc6ae7200a2699c566503735';
    pingfm.user_app_key = pingprefs.getPref('pingfm_appkey');
    pingfm.debug = pingprefs.getPref('debug', false) ? '1' : '0';
    
    pingfm.view = pingview;
}


function doPost(event)
{
    pingview.preExecute();
    
    var method = pingview.getPostMethod();
    var body = jQuery('#post_text').val();

    // keep history
    pingdb.addPing(body, method);

    pingfm.postMessage(body, method);
    pingview.resetPost();
}


// this is not a saved pref
function setPostType(event)
{
    var type = event.target.value;
    
    // change default
    pingfm.post_method = type;

    // store for later
    pingprefs.setPref("post_type", type);
}

var pingview = {
  historyNum: -1,
  
  draftping: null,

  // for use by pingfm
  
  log: function(msg) {
    console.log(msg);
  },
  
  showError: function(msg) {
    jQuery('#back_test_output').val( msg);
    console.log("ERROR: " + msg);
    showError(msg);
  },
  
  showNotice: function(msg) {
    alert(msg);
  },
  
  showResult: function(msg) {
    console.log("RESULT: " + msg);
  },
  
  // for direct app / UI use

  showPrevHistory: function() {
    this.showHistory(Math.min(this.historyNum+1, pingdb.countPings()-1));
  },
  
  showNextHistory: function() {
    this.showHistory(Math.max(-1, this.historyNum-1));
  },
  
  showHistory: function(num, suppressDraft) {
    var ping;
    var showNum;
    if (num == this.historyNum)
        return;
    
    // save draft
    if (this.historyNum == -1 && ! suppressDraft) {
        this.saveDraftPing();
    }
    
    if (num > pingdb.countPings())
    {
        num = -1;
    }
    
    if (num == -1) {
        if (this.draftping)
            ping = this.draftping;
        else
            ping = {message:''};
        showNum = '';
    }
    else {
        ping = pingdb.getPing(num);
        showNum = String(num+1);
    }
    
    this.historyNum = num;

    if (ping) {
        this.setPostBody(ping.message);
        if (ping.destination) {
            this.setPostMethod(ping.destination);
        }
        jQuery('#historyNum').text(showNum);
    }
  },

  getPostMethod: function() {
    return jQuery('select', jQuery('#post_type')).val();
  },
  
  setPostMethod: function(val) {
    jQuery('select', jQuery('#post_type')).val(val);
    jQuery('select', jQuery('#post_type')).change();
  },
  
  getPostBody: function() {
    return jQuery('#post_text').val();
  },
  
  setPostBody: function(val) {
    jQuery('#post_text').val(val);
    jQuery('#post_text').change();
    // this.saveDraftPing();
    // postTextChange();
  },
  
  saveDraftPing: function() {
    var ping = {
        message: this.getPostBody(),
        destination: this.getPostMethod(),
        when: new Date()
    };
    
    this.draftping = ping;
  },
  
  getDebug: function() {
    return jQuery('#debug_button').get(0).checked;
  },
  
  setDebug: function(val) {
    jQuery('#debug_button').get(0).checked = val;
    jQuery('#debug_button').change();
  },

  getAppKey: function() {
    return jQuery('#app_key').val();
  },
  
  setAppKey: function(val) {
    jQuery('#app_key').val(val);
  },

  // for the config
  getAccountName: function() {
    return jQuery('#account_name').val();
  },
  
  setAccountName: function(val) {
    jQuery('#account_name').val(val);
  },
  
  setNameDisplay: function(val) {
    jQuery('#name_display').text(val);
  },
  
  resetPost: function(val) {
      this.setPostBody('');

      // don't save draft
      this.showHistory(-1, true);
      // this.selectPreferredPostType();
  },
  
  setVersion: function(version) {
    if (! version) version = this.version;
    
    jQuery('#version').val(String(version));
  },

  selectPreferredPostType: function() {
    if (pingprefs.getPref("post_type"))
    {
        pingview.setPostMethod(pingprefs.getPref("post_type"));
    }
  },
  
  exposeScrolldown: function() {
    var item = document.getElementById("scrolldown");

    item.style.display = "block";
  },
  
  hideScrolldown: function() {
    var item = document.getElementById("scrolldown");

    item.style.display = "none";
  },

  isScrolldownExposed: function() {
    var item = document.getElementById("scrolldown");

    return item.style.display != "none";
  },
  
  renderDate: function(date) {
    return date.toString();
  },
  
   /* id, method, date, services, body */
  renderMessage: function(item) {
    var itemhtml = '<div>';
    itemhtml += '<span class="message_body">' + item.body + '</span>';
    itemhtml += '<span class="message_method">[' + item.method + ']</span>';
    itemhtml += '<span class="message_timestamp">' + this.renderDate(item.date) + '</span>';

    itemhtml += '</div>';

    return itemhtml;
  },
  
  renderMessagelist: function(list) {
    var container = document.getElementById("msglist");
    
    var count = list.length;
    
    var html = '';
    

    var item, idx;
    var sep = "";
    for (idx in list) {
        item = list[idx];
        if (typeof item == 'function') continue;
        
        html += sep + this.renderMessage(item);
        sep = "<hr/>";
    }
    
    container.innerHTML = html;
    
    jQuery('#msglist').change();
    jQuery('#scrollArea').get(0).object.refresh();
  },
  
  // reset for execution of the next comment
  preExecute: function() {
    this.hideScrolldown();
  },
  
  version: '0.3.1',
};

/**
 *
 *
 * See http://webkit.org/misc/DatabaseExample.html
 */ 
var pingdb = {
    db: null,
    
    initialized: false,
    
    available: true,
    
    initialize: function() {
        if (this.initialized)
            return true;

        this.db = [];

        this.initialized = true;
        return true;
    },
    
    clear: function() {
        this.db = [];
    },
    
    addPing: function(message, destination) {
        if (! destination) { destination = 'default' };
        this.db.unshift( {message: message, destination: destination, when: new Date()} );
    },
    
    listPings: function(count) {
        if (! count) count = 10;
        return this.db;
    },
    
    getPing: function(num) {
        if (this.db.length <= num)
            return null;
        else
            return this.db[num];
    },
    
    countPings: function() {
        return this.db.length;
    },
    
    version: '0.3.1'
}

function doDebugClick(event)
{
    pingfm.debug = pingview.getDebug() ? '1' : '0';
}

/*
  <triggers>
    <trigger id="twt" method="microblog">
      <services>
        <service id="twitter" name="Twitter"/>
      </services>
    </trigger>
    <trigger id="fb" method="status">
      <services>
        <service id="facebook" name="Facebook"/>
      </services>
    </trigger>
    ...
  </triggers>
*/

function handleTriggers(triggers)
{
    var options = [
            ['Default', 'default', true],
            ['Status', 'status'],
            ['Micro-blog', 'microblog'],
            ['Blog', 'blog']
        ];
    
    if (triggers) {
        for (name in triggers)
        {
            var trigger = triggers[name];
            if (typeof(trigger) == 'function') continue;
            
            options.push([trigger.id + " [" + trigger.method + "]", "#" + trigger.id]);
        }
    }

    jQuery('#post_type').get(0).object.setOptions(options, false);
    pingview.selectPreferredPostType();
    jQuery('#post_type').change();
}

function setupUI()
{
    // get custom triggers if the user is configured
    if (pingprefs.isConfigured()) {
        pingfm.getTriggers(handleTriggers, function() { handleTriggers(null); });
    }
    
    pingview.setVersion( dashcode.getLocalizedString("Version") + pingfm.version );
    
    var name = pingprefs.getPref("name");
    if (!name)  name = "";
    else name = dashcode.getLocalizedString("Account: ") + name;

    pingview.setNameDisplay( name );
    
    pingview.selectPreferredPostType();
}

function showPrevHistory()
{
    pingview.showPrevHistory();
}

function showNextHistory()
{
    pingview.showNextHistory();
}

function showLatestPosts(event)
{
    if (pingview.isScrolldownExposed())
    {
        pingview.hideScrolldown();
    } else {
        pingview.exposeScrolldown();
        pingfm.getLatest(10, null, function(parsed, xml) {
            console.log("got latest!");
            pingview.renderMessagelist(parsed);
          }
        );
    }
}

function hideScrolldown(event)
{
    pingview.hideScrolldown();
}