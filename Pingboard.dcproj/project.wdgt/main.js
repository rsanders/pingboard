/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
    
    setupPingFM();

    setupUI();
    
    pingdb.initialize();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
    setTimeout("checkConfig();", 500);
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    var error = document.getElementById("error_pane");
    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    error.style.display= "none";
    back.style.display = "block";


    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    var error = document.getElementById("error_pane");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";
    error.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

function showError(message)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    var error = document.getElementById("error_pane");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    jQuery('#error_text').val(message);

    front.style.display="none";
    back.style.display="none";
    error_pane.style.display="block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function checkConfig()
{
    if (! pingprefs.isConfigured())
    {
        firstTimeConfiguration();
    }
}

function openPingFM(event)
{
    widget.openURL("http://ping.fm/");
}


function openAppKeyPage(event)
{
    widget.openURL("http://ping.fm/key/");
}


function postTextChange()
{
    var count = jQuery('#post_text').val().length;
    jQuery('#character_count').text(String(count));
}

var pingprefs = {
    _makekey: function(key) {
        return widget.identifier + "-" + key;
    },
    
    setPref: function(key, value) {
        widget.setPreferenceForKey(value, this._makekey(key) );
    },
    
    getPref: function(key, defval) {
        var res = widget.preferenceForKey( this._makekey(key) );
        if (res == undefined) {
            return defval;
        } else {
            return res;
        }
    },
    
    isConfigured: function() {
        return this.getPref("configured") == "true";
    },
    
    setConfigured: function(val) {
        this.setPref("configured", val ? "true" : "false");
    },
}

function setAppKey(value)
{
    pingprefs.setPref("pingfm_appkey", value);
}

function getAppKey()
{
    return pingprefs.setPref("pingfm_appkey");
}

function savePrefs()
{
    pingprefs.setPref("pingfm_appkey", pingview.getAppKey());
    pingprefs.setPref("debug", pingview.getDebug());
    pingprefs.setPref("name", pingview.getAccountName());
    
    pingprefs.setPref("configured", "true");
}

function populatePrefs()
{
    pingview.setAppKey(pingprefs.getPref("pingfm_appkey"));
    pingview.setDebug(pingprefs.getPref("debug"));
    pingview.setAccountName(pingprefs.getPref("name"));
}

function configDone(event)
{
    // reset custom trigger list
    handleTriggers(null);
    
    savePrefs();
    setupPingFM();
    setupUI();

    return showFront(event);
}

function doShowBack(event)
{
    populatePrefs();
    showBack(event);
}

function firstTimeConfiguration()
{
    showBack();
}


function validateUser(event)
{
    // need to save prefs and setup Ping.FM first so we have the latest key
    savePrefs();
    setupPingFM();

    pingfm.validateUser();
}

var pingfm = {
   // the base URL for the Ping.FM API
   baseurl: "http://api.ping.fm/v1/",
   
   // whether to omit the cache-buster; should usually be true
   allowCache: true,
   
   // API key for this app; shared for all users
   api_key: null,
   
   // per-user application key
   user_app_key: null,
   
   // whether to pass the debug flag to Ping.FM (simulates posting)
   debug: 0,
   
   // default method if not specified
   post_method: 'default',
   
   // should be a view object with showError, showResult, showNotice, log
   view: null,

   // custom trigger information
   triggerxml: null,
   triggerinfo: [],
   
   getBaseArgs: function() {
     return { 
         api_key: this.api_key, 
         user_app_key: this.user_app_key,
         debug: this.debug
     };
   },
   
   validateUser: function() {
     var args = this.getBaseArgs();
     this.doRequest('user.validate', args, 
            function(data) {
                console.log("Success on user.validate");
                jQuery('#back_test_output').val("User is valid: " + jQuery('message', data).text());
            },
            function(data, error) {
                console.log("Failure on user.validate");
                jQuery('#back_test_output').val( error);
            }
        );
   },
   
   // split a body into a body and title if there are any newlines,
   // return an object with body and title properties
   _getTitle: function(body) {
     if (!body) return {body: null, title: null};
     var lines = body.split("\n");
     if (lines.length > 1) {
        return {body: lines.slice(1).join("\n"), title: lines[0]};
     } else {
        return {body: body, title: null};
     }
   },
   
   // expects # prefix for custom triggers
   _getPostType: function(name) {
     if (name[0] == '#') {
        name = name.substring(1);
        var info = this.triggerinfo[name];
        if (info) {
            return info.method;
        } else {
            // XXX - can we determine this?
            return "status";
        }
     } else {
        return name;
     }
   },
   
   postMessage: function(body, method, title) {
     var args = this.getBaseArgs();
     args.body = body;
     
     // default
     if (! method) method = this.post_method;

     // default posting API call; use user.tpost for custom triggers
     var apimethod = 'user.post';

     // should always return "status", "blog", or "microblog" 
     var post_type = this._getPostType(method);

     // custom trigger
     if (this.post_method[0] == '#') {
        args.trigger = this.post_method.substring(1);
        apimethod = 'user.tpost';
     } else {
        args.post_method = this.post_method;
        apimethod = 'user.post';
     }
     
     if (post_type == 'blog' && !title) {
        var parts = this._getTitle(args.body);
        if (! parts.title) {
            parts.title = "Blog Post from Ping.FM";
        }
        args.body = parts.body;
        args.title = parts.title;
     }

     var me = this;

     this.doRequest(apimethod, args, 
            function(data) {
                me.log("Success on user.post");
                me.showResult("Posting succeeded: " + jQuery('message', data).text());
            },
            function(data, error) {
                me.log("Failure on user.post");
                me.showError(error);
            }
        );
   },
   
   log: function(msg) {
     if (this.view && view.log) view.log(msg);
     if (this.debug)
        console.log(msg);
   },
   
   showError: function(error) {
     if (this.debug) 
        console.log(error);
     if (this.view && view.showError) view.showError(error);
   },

   showResult: function(msg) {
     if (this.debug) 
        console.log(msg);
     if (this.view && view.showResult) view.showResult(msg);
   },

   getTriggerInfo: function() {
     return this.triggerinfo;
   },

    /*
      <triggers>
        <trigger id="twt" method="microblog">
          <services>
            <service id="twitter" name="Twitter"/>
          </services>
        </trigger>
        <trigger id="fb" method="status">
          <services>
            <service id="facebook" name="Facebook"/>
          </services>
        </trigger>
        ...
      </triggers>
    */

   getTriggers: function(success, failure) {
     var args = this.getBaseArgs();

     var me = this;
     this.doRequest('user.triggers', args, 
            function(data) {
                me.triggerxml = data;
                var triggerinfo = [];
                if (data) {
                    jQuery('trigger', data).each( function(i) {
                            var id = jQuery(this).attr('id');
                            var method = jQuery(this).attr('method');
                            var services = [];
                            jQuery('service', this).each(function(i) { services.push(jQuery(this).attr('id')); } );
                            triggerinfo[id] = {id: id, method: method, services: services};
                        }
                    );
                }
                me.triggerinfo = triggerinfo;
                me.log("Success on user.triggers");
                success( triggerinfo );
            },
            function(data, error) {
                me.log("Failure on user.triggers");
                me.showError(error);
                if (failure) {
                    failure(data, error);
                }
            }
        );
   },
   

      doRequest: function(method, args, success, failure, httpmethod) {
        if (! httpmethod) {
          httpmethod = 'post';
        }

        var me = this;
        var request = jQuery.ajax({
          url: me.baseurl + method,
          type: httpmethod,
          data: args,
          global: true,
          cache: me.allowCache,
          success: this._makejQuerySuccessHandler(success, failure),
          error: this._makejQueryFailureHandler(failure)
        });
      },

  /**** Utility functions ****/

  _makejQuerySuccessHandler: function(success, failure) {
    var api = this;
    var me = this;
    return function (data, status) {
      if (jQuery('rsp', data).attr('status') != 'OK')
      {
        me.log("status is bad");
        if (failure) {
          var errorText = jQuery('message', data).text();
          failure({ responseXML: data, responseText: "<error>" + errorText + "</error>" },
                  errorText, null);

        }
      }
      else
      {
        me.log("status is good");
        if (success) {
          success(data, status);
        }
      }
    };
  },

  _makejQueryFailureHandler: function(callback) {
    var me = this;
    return function (response, status, error) {
      me.log("in hard failure");
      if (callback) {
        callback(response, "Hard failure: " + status, error);
      }
    };
  },
   
   foo: 'bar'
};

function setupPingFM()
{
    pingfm.api_key = '62efb891fc6ae7200a2699c566503735';
    pingfm.user_app_key = pingprefs.getPref('pingfm_appkey');
    pingfm.debug = pingprefs.getPref('debug', false) ? '1' : '0';
}


function doPost(event)
{
    var method = pingview.getPostMethod();
    var body = jQuery('#post_text').val();

    // keep history
    pingdb.addPing(body, method);

    pingfm.postMessage(body, method);
    pingview.resetPost();
}


// this is not a saved pref
function setPostType(event)
{
    pingfm.post_method = event.target.value;
}

var pingview = {
  historyNum: -1,

  // for use by pingfm
  
  log: function(msg) {
    console.log(msg);
  },
  
  showError: function(msg) {
    jQuery('#back_test_output').val( error);
    console.log("ERROR: " + msg);
    showError(msg);
  },
  
  showNotice: function(msg) {
    alert(msg);
  },
  
  showResult: function(msg) {
    console.log("RESULT: " + msg);
  },
  
  // for direct app / UI use

  showPrevHistory: function() {
    this.showHistory(Math.min(this.historyNum+1, pingdb.countPings()));
  },
  
  showNextHistory: function() {
    this.showHistory(Math.max(-1, this.historyNum-1));
  },
  
  showHistory: function(num) {
    var ping;
    if (num == -1) {
        ping = {message:'', destination: 'default'};
        showNum = '';
    }
    else {
        ping = pingdb.getPing(num);
        showNum = String(num+1);
    }
    
    this.historyNum = num;

    if (ping) {
        this.setPostBody(ping.message);
        this.setPostMethod(ping.destination);
        jQuery('#historyNum').text(showNum);
    }
  },

  getPostMethod: function() {
    return jQuery('select', jQuery('#post_type')).val();
  },
  
  setPostMethod: function(val) {
    jQuery('select', jQuery('#post_type')).val(val).change();
  },
  
  getPostBody: function() {
    return jQuery('#post_text').val();
  },
  
  setPostBody: function(val) {
    jQuery('#post_text').val(val).change();
    // postTextChange();
  },
  
  getDebug: function() {
    return jQuery('#debug_button').get(0).checked;
  },
  
  setDebug: function(val) {
    jQuery('#debug_button').get(0).checked = val;
    jQuery('#debug_button').change();
  },

  getAppKey: function() {
    return jQuery('#app_key').val();
  },
  
  setAppKey: function(val) {
    jQuery('#app_key').val(val);
  },

  // for the config
  getAccountName: function() {
    return jQuery('#account_name').val();
  },
  
  setAccountName: function(val) {
    jQuery('#account_name').val(val);
  },
  
  setNameDisplay: function(val) {
    jQuery('#name_display').text(val);
  },
  
  resetPost: function(val) {
      this.setPostBody('');
      this.showHistory(-1);
  },
  
  setVersion: function(version) {
    if (! version) version = this.version;
    
    jQuery('#version').val(String(version));
  },
  
  version: '0.3',
};

/**
 *
 *
 * See http://webkit.org/misc/DatabaseExample.html
 */ 
var pingdb = {
    db: null,
    
    initialized: false,
    
    available: true,
    
    initialize: function() {
        if (this.initialized)
            return true;

        this.db = [];

        this.initialized = true;
        return true;
    },
    
    clear: function() {
        this.db = [];
    },
    
    addPing: function(message, destination) {
        if (! destination) { destination = 'default' };
        this.db.unshift( {message: message, destination: destination, when: new Date()} );
    },
    
    listPings: function(count) {
        if (! count) count = 10;
        return this.db;
    },
    
    getPing: function(num) {
        if (this.db.length <= num)
            return null;
        else
            return this.db[num];
    },
    
    countPings: function() {
        return this.db.length;
    },
    
    version: '0.3'
}

function doDebugClick(event)
{
    pingfm.debug = pingview.getDebug() ? '1' : '0';
}

/*
  <triggers>
    <trigger id="twt" method="microblog">
      <services>
        <service id="twitter" name="Twitter"/>
      </services>
    </trigger>
    <trigger id="fb" method="status">
      <services>
        <service id="facebook" name="Facebook"/>
      </services>
    </trigger>
    ...
  </triggers>
*/

function handleTriggers(triggers)
{
    var options = [
            ['Default', 'default', true],
            ['Status', 'status'],
            ['Micro-blog', 'microblog'],
            ['Blog', 'blog']
        ];
    
    /*
    if (triggers) {
        jQuery('trigger', triggers).each( function(i) {
                var id = jQuery(this).attr('id');
                var method = jQuery(this).attr('method');
                
                options.push([id + " [" + method + "]", "#" + id]);
            }
        );
    }
    */
    
    if (triggers) {
        for (name in triggers)
        {
            var trigger = triggers[name];
            if (typeof(trigger) == 'function') continue;
            
            options.push([trigger.id + " [" + trigger.method + "]", "#" + trigger.id]);
        }
    }

    jQuery('#post_type').get(0).object.setOptions(options, false);
    jQuery('#post_type').change();
}

function setupUI()
{
    // get custom triggers if the user is configured
    if (pingprefs.isConfigured()) {
        pingfm.getTriggers(handleTriggers, function() { handleTriggers(null); });
    }
    
    pingview.setVersion( dashcode.getLocalizedString("Version") + pingfm.version );
    
    var name = pingprefs.getPref("name");
    if (!name)  name = "";
    else name = dashcode.getLocalizedString("Account: ") + name;

    pingview.setNameDisplay( name );
}

function showPrevHistory()
{
    pingview.showPrevHistory();
}

function showNextHistory()
{
    pingview.showNextHistory();
}